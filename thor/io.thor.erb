#!/usr/local/bin/ruby
require 'rest_client'
require 'uri'
require 'thor'
require 'json'
class CouchIO < Thor
  map "-s" => :shorten
  map "-l" => :shorts
  map "-o" => :open
  map "-d" => :delete
  

  desc "shorten TARGET", "Shortens the passed URL"
  def shorten target = `pbpaste`
    puts "Longish URL: #{target}"
    short = RestClient.post("#{private_url}/shorten?target=#{target}",{}).body
    puts "Short URL: #{short.strip}"
  end

  desc :shorts, "Lists all shortened URLs"
  def shorts
    response = RestClient.get("#{private_url}/shorts-by-date.json?limit=20&descending=true").body
    docs = JSON.parse(response)["rows"]
    docs.each do |d|
      date = DateTime.parse d["key"]
      puts "[#{date.day}.#{date.mon}. #{date.hour}:#{date.min}] #{d["id"]} -> #{d["value"]}\n" 
    end
  end

  desc "open ID", "Opens URL by ID in browser"
  def open id
    `open #{public_url}/#{id}`
  end

  desc "delete ID", "Permanently removes ID"
  def delete id
    response = RestClient.get("#{private_url}/shorts.json?include_docs=true&key=#{URI.escape "\"#{id}\""}").body
    doc = JSON.parse(response)["rows"].first["doc"]
    RestClient.delete "#{private_url}/#{id}?rev=#{doc["_rev"]}"
  end

  private 
  def private_url
    "https://#{username}:#{password}@#{host}"
  end

  def public_url
    "http://#{host}"
  end
  
  def credentials_file
    File.expand_path(File.join(ENV["HOME"],".io_credentials"))
  end

  def credentials
    raise "No Credentials present" unless File.exists?(credentials_file)
    @credentials ||= JSON.parse(File.read(credentials_file))
    @credentials
  end

  def host
    "<%= puts "Your URL-Shortener-Domain: "; STDIN.gets.chomp%>"
  end

  def username
    credentials["username"]
  end

  def password
    credentials["password"]
  end
end

# vim:filetype=ruby
